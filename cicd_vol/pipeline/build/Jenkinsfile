pipeline{
    agent any
    // tools {
    //     "org.jenkinsci.plugins.terraform.TerraFormInstallation"
    // }
    parameters {
        string(name: 'api_endpoint', defaultValue: '')
        string(name: 'workspace', defaultValue: '')
    }
    environment{
        TF_HOME = tool name('terraform')
        // TF_HOME = tool name: 'terraform-0.12.3'
        TF_IN_AUTOMATION = "true"
        PATH = "$TF_HOME:$PATH"
        BUCKET = "bucket=bkt-automation-tmp.state"
        DYNAMODB_TABLE = "dynamodb_table=dyn-automation-tmp.state"
        ACCESS_KEY = credentials('ACCESS_KEY')
        SECRET_KEY = credentials('SECRET_KEY')
        AWS_REGION = credentials('AWS_REGION')
    }
    stages{
         stage("Init"){
            steps{
                echo "======== Executing Init ========"
                dir('/build/ec2'){
                    script{
                        try { 
                            def file ="./.terraform/terraform.tfstate"
                            def fileFound = fileExists(file)
                            // TODO add ! 
                            // if(!fileExists(file)){
                            sh "terraform --version"
                            sh "terraform init \
                            -input=false \
                            -backend-config=$BUCKET -backend-config=${DYNAMODB_TABLE} \
                            -backend-config='access_key=${ACCESS_KEY}' \
                            -backend-config='secret_key=${SECRET_KEY}'"
                            // }
                            // else {
                                // echo "======== Skip Init ========"
                            // }
                        } catch (Exception err){
                            println(err)
                        }
                    }
                }
            }
        }
        stage("Plan"){
            steps{
                echo "======== Executing Plan ========"
                dir('/build/ec2'){
                    script {
                        try {
                            // TODO Add url param check
                            if (params.workspace == ''){
                                throw new Exception('Specify workspace')
                            }
                            else{
                                try {
                                    sh "terraform workspace new ${params.workspace}"
                                } catch (Exception err){
                                    sh "terraform workspace select ${params.workspace}"
                                }
                                try {
                                    sh "terraform plan \
                                    -input=false \
                                    -var 'aws_access_key=${ACCESS_KEY}' \
                                    -var 'aws_secret_key=${SECRET_KEY}' \
                                    -var 'aws_region=${AWS_REGION}' \
                                    -var-file='../pre/basic.tfvars.json' \
                                    -var-file='./deployment.tfvars.json' \
                                    -out ${params.workspace}.tfplan"
                                    stash name: "terraform-plan", includes: "${params.workspace}.tfplan"
                                } catch (Exception err){
                                    println(err)
                                }
                                
                            }
                        } catch (Exception err) {
                            println(err)
                        }
                    }
                }
            }
        }
        stage("Apply"){
            steps{
                echo "======== Executing Apply ========"
                script {
                    def apply = false
                    try {
                        input message: 'Confirm Apply', ok: 'Apply Config'
                        apply = true
                    } catch (Exception err) {
                        dir('/build/ec2'){
                            sh "terraform destroy \
                            -var 'aws_access_key=${ACCESS_KEY}' \
                            -var 'aws_secret_key=${SECRET_KEY}' \
                            -var 'aws_region=${AWS_REGION}' \
                            -var-file='../pre/basic.tfvars.json' \
                            -var-file='./deployment.tfvars.json' \
                            -auto-approve"
                        }
                        currentBuild.result = 'UNSTABLE'
                    }
                    if(apply){
                        dir('/build/ec2'){
                            unstash "terraform-plan"
                            sh "terraform apply ${params.workspace}.tfplan"
                            sh "terraform output -json"
                        }
                    }
                }
        }
        }
    }
}
